# -*- encoding: utf-8 -*-
"""This module in an interaction library for ~~Project Name~~.

Generated by clix
Requires ssh2-python

"""

import socket
from ssh2.session import Session


def clean_options(options):
    """replace _ with -"""
    return {opt.replace("_", "-"): val for opt, val in options.items()}

class SSH:
    def __init__(
        self, host="ibm-x3250m4-04.lab.eng.rdu2.redhat.com", auth=["root", "dog8code"]
    ):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((host, 22))
        self.session = Session()
        self.session.handshake(sock)
        self.session.userauth_password(*auth)

    def run(self, command):
        """run a command on the host and return the results"""
        print(command)
        channel = self.session.open_session()
        channel.execute(command)
        size, data = channel.read()
        results = ""
        while size > 0:
            results += data.decode("utf-8")
            size, data = channel.read()
        channel.close()
        return {
            "results": results,
            "status": channel.get_exit_status(),
            "errors": channel.read_stderr()
        }


class OptionException(BaseException):
    def __init__(self, bad_options=[]):
        super().__init__(f"Received unexpected option(s): {bad_options}")


class ~~MainCommandClass~~:
    def __init__(self):
        self._command = "~~main command~~"
        self._options = [
~~command options~~
        ]
        self.connection = SSH()

    def _in_options(self, options=None, attributes=None):
        options = self._options if not options else options + self._options
        errs = [arg for arg in attributes.keys() if arg not in options]
        if errs:
            raise OptionException(errs)
        return True

    def _add_attributes(self, attributes):
        for name, value in attributes.items():
            self.__dict__[name] = value

    def _execute(self, sub_command, options, _flags=None):
        compiled_flags = ""
        if _flags:
            if not isinstance(_flags, list):
                _flags = [_flags]
            compiled_flags = " ".join([f"--{flag}" for flag in _flags])
        cmd_string = " ".join(
            [
                self._command
                if not self._command
                else self._command.replace("hammer", f"hammer {compiled_flags}"),
                sub_command,
            ]
            + ["--{}={}".format(name, value) for name, value in options.items()]
        )
        self._result = self.connection.run(cmd_string)
        if int(self._result["status"]) == 0:
            self._add_attributes(options)
        return self._result.get("results")

~~sub classes~~

~~sub methods~~